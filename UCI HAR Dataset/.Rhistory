if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
}
makeCacheMatrix(var)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- mean
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
}
makeCacheMatrix(var)
cacheSolve(var)
var2<-makeCacheMatrix(var)
cacheSolve(var2)
var<-matrix(c(1:4),2,2)
var2<-makeCacheMatrix(var)
cacheSolve(var2)
print(cacheSolve(var2))
cacheSolve(var2)
## Put comments here that give an overall description of what your
## functions do
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setinverse(m)
}
var2<-makeCacheMatrix(var)
cacheSolve(var2)
cacheSolve(var2)
cacheSolve(var2)
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
matinverse <- NULL
set <- function(y) {
x <<- y
matinverse <<- NULL
}
get <- function() x
setinverse <- function(inverse) matinverse <<- inverse
getinverse <- function() matinverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
matinverse <- x$getinverse()
if(!is.null(matinverse)) {
message("Inverse has already been cached")
return(matinverse)
}
#Code to set inverse into a cache if it hasnt been already calculated
matrix <- x$get()
matinverse <- solve(matrix, ...)
x$setinverse(matinverse)
}
cacheSolve(var)
cacheSolve(var2)
rm(list=ls())
var<-matrix(c(1:25),5,5)
var
## Write a short comment describing this function
makeCacheMatrix <- function(x = matrix()) {
matinverse <- NULL
set <- function(y) {
x <<- y
matinverse <<- NULL
}
get <- function() x
setinverse <- function(inverse) matinverse <<- inverse
getinverse <- function() matinverse
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Write a short comment describing this function
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
matinverse <- x$getinverse()
if(!is.null(matinverse)) {
message("Inverse has already been cached")
return(matinverse)
}
#Code to set inverse into a cache if it hasnt been already calculated
matrix <- x$get()
matinverse <- solve(matrix, ...)
x$setinverse(matinverse)
}
makeCacheMatrix(var)
var2<-makeCacheMatrix(var)
cacheSolve(var2)
var<-matrix(c(5:30),5,5)
var<-matrix(c(5:29),5,5)
var
var2<-makeCacheMatrix(var)
cacheSolve(var2)
var<-matrix(c(1,3,3,1,4,3,1,3,4),3,3)
var
var<-matrix(c(1,1,1,3,4,3,3,3,4),3,3)
var
var2<-makeCacheMatrix(var)
cacheSolve(var2)
cacheSolve(var2)
## Put comments here that give an overall description of what your
## functions do
## Function that creates a special matrix
makeCacheMatrix <- function(x = matrix()) {
matinverse <- NULL
get <- function() x
setinverse <- function(inverse) matinverse <<- inverse
getinverse <- function() matinverse
list(get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Function takes in a "special matrix"
##Checks if an inverse has already been calculated
##If not it sets the inverse of the matrix
##If yes, it prints a message and retrieves the cached inverse matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
matinverse <- x$getinverse()
if(!is.null(matinverse)) {
message("Inverse has already been cached")
return(matinverse)
}
#Code to set inverse into a cache if it hasnt been already calculated
matrix <- x$get()
matinverse <- solve(matrix, ...)
x$setinverse(matinverse)
}
var<-matrix(c(1,1,1,3,4,3,3,3,4),3,3)
var2<-makeCacheMatrix(var)
cacheSolve(var2)
cacheSolve(var2)
rm(list=ls())
## 2 functions to get the inverse of a matrix
## cache the inverse if it doesnt exist already
## Function that creates a special matrix
##and cache's the inverse using the <<- operator
makeCacheMatrix <- function(x = matrix()) {
matinverse <- NULL
get <- function() x
setinverse <- function(inverse) matinverse <<- inverse
getinverse <- function() matinverse
list(get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Function takes in a "special matrix"
##Checks if an inverse has already been calculated
##If not it sets the inverse of the matrix
##If yes, it prints a message and retrieves the cached inverse matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
matinverse <- x$getinverse()
if(!is.null(matinverse)) {
message("Inverse has already been cached")
return(matinverse)
}
#Code to set inverse into a cache if it hasnt been already calculated
matrix <- x$get()
matinverse <- solve(matrix, ...)
message("Setting Inverse for the first time")
x$setinverse(matinverse)
return(x$getinverse)
}
var<-matrix(c(1,1,1,3,4,3,3,3,4),3,3)
var2<-makeCacheMatrix(var)
cacheSolve(var2)
## 2 functions to get the inverse of a matrix
## cache the inverse if it doesnt exist already
## Function that creates a special matrix
##and cache's the inverse using the <<- operator
makeCacheMatrix <- function(x = matrix()) {
matinverse <- NULL
get <- function() x
setinverse <- function(inverse) matinverse <<- inverse
getinverse <- function() matinverse
list(get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Function takes in a "special matrix"
##Checks if an inverse has already been calculated
##If not it sets the inverse of the matrix
##If yes, it prints a message and retrieves the cached inverse matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
matinverse <- x$getinverse()
if(!is.null(matinverse)) {
message("Inverse has already been cached")
return(matinverse)
}
#Code to set inverse into a cache if it hasnt been already calculated
matrix <- x$get()
matinverse <- solve(matrix, ...)
message("Setting Inverse for the first time")
x$setinverse(matinverse)
return(matinverse)
}
rm(list=ls())
var<-matrix(c(1,1,1,3,4,3,3,3,4),3,3)
var2<-makeCacheMatrix(var)
## 2 functions to get the inverse of a matrix
## cache the inverse if it doesnt exist already
## Function that creates a special matrix
##and cache's the inverse using the <<- operator
makeCacheMatrix <- function(x = matrix()) {
matinverse <- NULL
get <- function() x
setinverse <- function(inverse) matinverse <<- inverse
getinverse <- function() matinverse
list(get = get,
setinverse = setinverse,
getinverse = getinverse)
}
## Function takes in a "special matrix"
##Checks if an inverse has already been calculated
##If not it sets the inverse of the matrix
##If yes, it prints a message and retrieves the cached inverse matrix
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
matinverse <- x$getinverse()
if(!is.null(matinverse)) {
message("Inverse has already been cached")
return(matinverse)
}
#Code to set inverse into a cache if it hasnt been already calculated
matrix <- x$get()
matinverse <- solve(matrix, ...)
message("Setting Inverse for the first time")
x$setinverse(matinverse)
return(matinverse)
}
var<-matrix(c(1,1,1,3,4,3,3,3,4),3,3)
var2<-makeCacheMatrix(var)
cacheSolve(var2)
rnorm(10,2,4)
x<-rnorm(10,2,4)
mean(x)
?rnorm
rnorm(2,1,1)
rnorm(2,1,10)
mean(rnorm(2,1,10))
mean(rnorm(2,1,0))
mean(rnorm(2,1,1))
mean(rnorm(1000,1,1))
mean(rnorm(100000000000000,1,1))
mean(rnorm(10000,1,1))
mean(rnorm(1000000,1,1))
?rbinom
rbinom(3,3,0.5)
rbinom(3,3,0)
rbinom(3,3,0.1)
rbinom(3,3,0.2)
rbinom(3,3,0.4)
rbinom(3,1,0.5)
rbinom(3,1,1)
rbinom(3,1,0)
rbinom(3,1,0.5)
rbinom(3,1,0.4)
rbinom(3,1,0.4)
rbinom(3,1,0.1)
rbinom(3,1,0.1)
rbinom(3,1,0.1)
rbinom(3,1,0.1)
rbinom(3,1,0.1)
rbinom(3,1,0.1)
rbinom(3,1,0.1)
rbinom(3,1,0.2)
rbinom(3,1,0.2)
rbinom(3,1,0.2)
rbinom(3,1,0.2)
rbinom(3,1,0.2)
rbinom(3,1,0.2)
rbinom(3,1,0.2)
rbinom(3,1,0.3)
rbinom(3,1,0.3)
set.seed(1)
rpois(5, 2)
rpois(5, 2)
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(y,x)
plot(x,y)
x
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
rm(list-ls())
rm(list=ls())
library(swirl)
swirl()
library(swirl)
swirl()
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
sample(c(0,1),prob=(0.3,0.7))
sample(c(0,1),100,prob=(0.3,0.7))
sample(c(0,1),100,prob=c(0.3,0.7))
sample(c(0,1),100,prob=c(0.3,0.7),replace=TRUE)
flips<-0sample(c(0,1),100,prob=c(0.3,0.7),replace=TRUE)
flips<-sample(c(0,1),100,prob=c(0.3,0.7),replace=TRUE)
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob =0.7)
flips2<-rbinom(100, size = 100, prob =0.7)
flips2<-rbinom(100, size = 1, prob =0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
rpois(5,10)
my_pois<-replicate(100, rpois(5, 10))
my_pois
cm<-colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed,y=cars$dist)
plot(x=cars$dist,y=cars$speed)
?plot
plot(x=cars$speed,y=cars$dist,xlab = "Speed")
plot(x=cars$speed,y=cars$dist,xlab = "Speed",ylab = "Stopping Distance")
(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x=cars$speed,y=cars$dist,xlab = "Speed",ylab = "Stopping Distance")
plot(cars,main="My Plot")
?plot
plot(cars,sub="My Plot")
plot(cars,sub="My Plot Subtitle")
plot(cars,col=2)
plot(cars,xlim=c(10,15))
plot(cars,pch=2
)
data("mtcars")
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl,data = mtcars)
hist(mtcars$mpg)
setwd("Users\Sandheep\Desktop\Data Science Specialization\R Programming\QuizWeek4")
setwd("Users/Sandheep/Desktop/Data Science Specialization/R Programming/QuizWeek4")
setwd("Users//Sandheep//Desktop//Data Science Specialization//R Programming//QuizWeek4")
setwd("//Users//Sandheep//Desktop//Data Science Specialization//R Programming//QuizWeek4")
setwd("//Users//Sandheep//Desktop//Data Science Specialization//R Programming//QuizWeek4")
setwd("//Users/Sandheep/Desktop/Data Science Specialization/R Programming/QuizWeek4")
setwd("C:/Users/Sandheep/Desktop/Data Science Specialization/R Programming/QuizWeek4")
URL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(URL, destfile = "data.csv", method="curl")
URL <- "http://d396qusza40orc.cloudfront.net/getdata%2Fdata%2Fss06hid.csv"
download.file(URL, destfile = "data.csv", method="curl")
download.file(URL, destfile = "data.csv")
dfData<-read.csv("data.csv")
names(dfData)
liNames<-strsplit(names(dfData),"wgtp")
liNames[123]
liNames[[123]
]
liNames
URL <- "https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(URL, destfile = "data2.csv")
dfData<-read.csv("data2.csv")
names(dfData)
dfData$Gross.domestic.product.2012
View(dfData)
View(dfData)
dfData<-dfData[5:]
dfData<-dfData[-(1:4)]
dfData<-read.csv("data2.csv")
dfData<-dfData[-(1:4),]
dfData<-dfData[!is.null(dfData$X.3),]
dfData<-dfData[!is.numeric(dfData$X.3),]
dfData <- dfData[!is.na(as.numeric(as.character(dfData$X.3))),]
dfData<-read.csv("data2.csv")
dfData<-dfData[-(1:4),]
dfData<-dfData[!is.null(dfData$Gross.domestic.product.2012)]
dfData<-dfData[!is.null(dfData$Gross.domestic.product.2012),]
dfData<-dfData[!is.integer(dfData$Gross.domestic.product.2012),]
View(dfData)
View(dfData)
dfData<-dfData[dfData$Gross.domestic.product.2012!-"",]
dfData<-dfData[dfData$Gross.domestic.product.2012!="",]
dfData<-dfData[dfData$X!="",]
dfData$X.3 <- as.numeric(gsub(",","",dfData$X.3))
average(dfData$X.3)
avg(dfData$X.3)
mean(dfData$X.3)
names(dfData)[names(dfData) == 'X.2'] <- 'countryNames'
grep("^United",dfData$countryNames)
length(grep("^United",dfData$countryNames))
URL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FGDP.csv"
download.file(URL, destfile = "data3.csv")
dfGDP<-read.csv("data3.csv")
URL<-"https://d396qusza40orc.cloudfront.net/getdata%2Fdata%2FEDSTATS_Country.csv"
download.file(URL, destfile = "data4.csv")
dfEDC<-read.csv("data4.csv")
View(dfGDP)
View(dfGDP)
dfGDP<-dfGDP[-(1:4),]
dfGDP<-dfGDP[dfGDP$X!="" & dfGDP$Gross.domestic.product.2012!="",]
View(dfEDC)
View(dfEDC)
names(dfEDC)
dfEDC2<-data.frame("CountryCode"=dfEDC$CountryCode,"Notes"=dfEDC$Special.Notes)
View(dfEDC2)
View(dfEDC2)
length(grep("Fiscal year end: June",dfEDC2$Notes)
)
library(quantmod)
install.packages(quantmod)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
View(amzn)
View(amzn)
sampleTimes = index(amzn)
a <- table(sampleTimes)
length(grep("2012", sampleTimes))
rm(list=ls())
setwd("C:/Users/Sandheep/Desktop/Data Science Specialization/Getting and Cleaning Data/UCI HAR Dataset")
d = read.table('train/X_train.txt')
View(d)
length(names(d))
d = read.table('features.txt')
d = read.table('train/X_train.txt')
d2 = read.table('features.txt')
View(d2)
View(d2)
View(d)
View(d)
d = read.table('train/y_train.txt')
View(d)
View(d)
d = read.table('train/subject_train.txt')
View(d)
View(d)
